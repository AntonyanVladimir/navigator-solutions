/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * TechConsult.Api
 * OpenAPI spec version: 1.0
 */
import type {
  AppointmentDto,
  CreateAppointmentRequest
} from './model';

export type getApiManageAppointmentsResponse200 = {
  data: AppointmentDto[]
  status: 200
}
    
export type getApiManageAppointmentsResponseSuccess = (getApiManageAppointmentsResponse200) & {
  headers: Headers;
};
;

export type getApiManageAppointmentsResponse = (getApiManageAppointmentsResponseSuccess)

export const getGetApiManageAppointmentsUrl = () => {


  

  return `/api/manage-appointments`
}

export const getApiManageAppointments = async ( options?: RequestInit): Promise<getApiManageAppointmentsResponse> => {
  
  const res = await fetch(getGetApiManageAppointmentsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: getApiManageAppointmentsResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as getApiManageAppointmentsResponse
}



export type postApiManageAppointmentsResponse200 = {
  data: AppointmentDto
  status: 200
}
    
export type postApiManageAppointmentsResponseSuccess = (postApiManageAppointmentsResponse200) & {
  headers: Headers;
};
;

export type postApiManageAppointmentsResponse = (postApiManageAppointmentsResponseSuccess)

export const getPostApiManageAppointmentsUrl = () => {


  

  return `/api/manage-appointments`
}

export const postApiManageAppointments = async (createAppointmentRequest: CreateAppointmentRequest, options?: RequestInit): Promise<postApiManageAppointmentsResponse> => {
  
  const res = await fetch(getPostApiManageAppointmentsUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createAppointmentRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: postApiManageAppointmentsResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as postApiManageAppointmentsResponse
}



export type getApiManageAppointmentsIdResponse200 = {
  data: AppointmentDto
  status: 200
}
    
export type getApiManageAppointmentsIdResponseSuccess = (getApiManageAppointmentsIdResponse200) & {
  headers: Headers;
};
;

export type getApiManageAppointmentsIdResponse = (getApiManageAppointmentsIdResponseSuccess)

export const getGetApiManageAppointmentsIdUrl = (id: number,) => {


  

  return `/api/manage-appointments/${id}`
}

export const getApiManageAppointmentsId = async (id: number, options?: RequestInit): Promise<getApiManageAppointmentsIdResponse> => {
  
  const res = await fetch(getGetApiManageAppointmentsIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: getApiManageAppointmentsIdResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as getApiManageAppointmentsIdResponse
}



export type deleteApiManageAppointmentsIdResponse200 = {
  data: void
  status: 200
}
    
export type deleteApiManageAppointmentsIdResponseSuccess = (deleteApiManageAppointmentsIdResponse200) & {
  headers: Headers;
};
;

export type deleteApiManageAppointmentsIdResponse = (deleteApiManageAppointmentsIdResponseSuccess)

export const getDeleteApiManageAppointmentsIdUrl = (id: number,) => {


  

  return `/api/manage-appointments/${id}`
}

export const deleteApiManageAppointmentsId = async (id: number, options?: RequestInit): Promise<deleteApiManageAppointmentsIdResponse> => {
  
  const res = await fetch(getDeleteApiManageAppointmentsIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: deleteApiManageAppointmentsIdResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as deleteApiManageAppointmentsIdResponse
}



export type getHealthResponse200 = {
  data: void
  status: 200
}
    
export type getHealthResponseSuccess = (getHealthResponse200) & {
  headers: Headers;
};
;

export type getHealthResponse = (getHealthResponseSuccess)

export const getGetHealthUrl = () => {


  

  return `/health`
}

export const getHealth = async ( options?: RequestInit): Promise<getHealthResponse> => {
  
  const res = await fetch(getGetHealthUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: getHealthResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as getHealthResponse
}
